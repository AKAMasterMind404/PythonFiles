Video:
https://www.youtube.com/watch?v=JxzZxdht-XY&ab_channel=CodeWithHarry

# Setup

    Step 1:
    run django-admin startproject <project-name>
    Wait until a project folder is created

    Step 2:
    Navigate in your project folder using cd
    Run ./manage.py runserver
    CMD window opens up. Go to the url
    mentioned there

x---x---x---x---x---x---x

# URL dispatching (0:34:00 - 0:46:00)

Any request made to the server will go through project level urls.py

    Step 1:
    At-least one app needs to be made in order for the project to run.
    Hence, make an application using the command ./manage.py startapp home (name of the app)
    Add the name of this app under the INSTALLED_APPS list in settings.py eg: 'home'

    Step 2:
    The url request for port url + "/admin" has been handled. But now we need
    to define the responses for other requests too. Hence, add the following line
    in project level urls.py under urlpatterns list as follows:

        path("", include("home.urls"))

    This tells the server to redirect the client request to urls.py file
    of the home/<app name> app in case any request except /admin is sent
    its way.

    Step 3:
    Create urls.py as well as views.py in the generated home/<app name folder>
    Copy the content from project level urls.py into app level urls.py.
    Any request that is sent (other than "/admin") will be sent to home/urls.py
    Import views in home/urls.py by using the following line:

        from . import views

    Now, under the urlpatterns list add the following line

        path("", views.index, name="home")

    Hence, the flow of control is as follows:
        1. User enters the server url followed by nothing ("")
        2. The request is sent to project level urls.py
        3. Here, the urlpattern list directs it to home/<appname> app level urls
        4. In the home/urls.py file the request is sent to home.view.index function
           which renders the request.

    Step 4:
    In the home.views.py file create a function named index which takes in one
    parameter with the name request. Also import HttpResponse module.
    The index function must return HttpResponse(request). The function would look like:

        def index(request):
            return HttpResponse("This is homepage")

    Restart the server by running ./manage.py runserver

    Similarly, each additional paths can be added in the urlpatterns list
    of home.urls.py as follows:

        path("<path-name>", views.<path-name>, name="<path-name>")

        Eg: Make a path /about such that a request with the url being
            server-url/about results in a page that reads "This is about page"

            -> Add path("about", views.about, name="about") in urlpatterns list
            -> In home.views.py file crate a function about that returns HttpResponse("This is about page")

    This was all about URL Dispatching

x---x---x---x---x---x---x
Static files, Templates and Admin access (0:46:00 - 1:10:00)

Static files: Files that are publicly available

    Step 1: Configuring static files
    Create two folders with the names "static" and "templates" under the project folder.
    Any static file thats publicly available is stored here. To enable the users to
    access these files do the following:

    Open the settings.py under project "directory".
    Search for STATICFILES_DIRS. If it isn't present,
    add the follwing text at the bottom

        STATICFILES_DIRS = [
            BASE_DIR / "static",
            '/var/www/static/',
        ]

    Now, any file present in the static folder can be accessed as follows:

        server-url/static/<filename.extension>

    Step 2: Configuring templates

    In settings.py under the DIRS list of TEMPLATES map, add the following line:

        os.path.join(BASE_DIR, "templates")

    Create a template say with the name index.html under the templates folder.
    Now to render this html page open the home<app-name>.views.py file.

    Instead of returning an HttpResponse, make the index function
    return the following:

        return render(request,'index.html')

    To add variables, make a map before the return statement named context.
    The keys of this map will be the variables and the values will be their contents.
    Pass this map as follows:

        context = { "variable1":"Atharv", "variable2": "Hello" }
        return render(request,'index.html', context)

    Now everytime the index function is called via the "" request this template is rendered!

All pages can be accessed via the HREF keyword and specifying the routename
Eg: href = "/about"

To add users in the admin Panel,

    Step 1:
    Run ./manage.py makemigrations  # Checks for changes in Schema and stores them in a queue
    Run ./manage.py migrate  # Applies pending changes created by makemigrations
    Run ./manage.py createsuperuser  # Creates a super user

x---x---x---x---x---x---x
Adding records in a database (1:52:00 - 2:07:00)

x---x---x---x---x---x---x
View database data using shell (2:16:00 - )

    Run ./manage.py shell

        from <app-name>.models import <object-name>
        <object-name>.objects.all() # Returns a query list of all objects of object-name type
        <object-name>.objects.all()[0] # Returns first object of object-name type
        <object-name>.objects.all()[0].name # Returns 'name' property of first object of object-name type
        <object-name>.objects.filter(name="name") # Returns all objects with name = "name"
        <object-name>.objects.filter(name="name", phone="999") # Returns all objects with name = "name" and phone=999

        ins = <object-name>.objects.all()[0]
        ins.property1 = "hello" # Updates the property1 property of ins instance to "hello"

        <object-name>.objects.filter(property1__startswith = "this is")
        # Returns objects whose property1 property starts with "this is"

        # Creates an instance of the object in the database
        <object-name>.objects.create(<property1>='<value-1>',<property2>='<value-2>',)
        
    exit() to exit the shell

x---x---x---x---x---x---x

Adding a model to your Project

    Step 1: Define a class in models.py

    Step 2: Register your class in the following manner in the admin.py file:

        from .models import <name-of-class>
        admin.site.register(<name-of-class>)

    Step 3: Sync using the commands

        ./manage.py makemigrations
        ./manage.py migrate

    You can access this model in the admin page of your site

x---x---x---x---x---x---x
Authentication App (2:25:00 - 2:56:23)