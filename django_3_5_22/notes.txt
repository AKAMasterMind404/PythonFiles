Video:
https://www.youtube.com/watch?v=JxzZxdht-XY&ab_channel=CodeWithHarry

# Setup

    Step 1:
    run django-admin startproject <project-name>
    Wait until a project folder is created

    Step 2:
    Navigate in your project folder using cd
    Run ./manage.py runserver
    CMD window opens up. Go to the url
    mentioned there

x---x---x---x---x---x---x

# URL dispatching (0:34:00 - 0:46:00)

Any request made to the server will go through project level urls.py

    Step 1:
    At-least one app needs to be made in order for the project to run.
    Hence, make an application using the command ./manage.py startapp home (name of the app)
    Add the name of this app under the INSTALLED_APPS list in settings.py eg: 'home'

    Step 2:
    The url request for port url + "/admin" has been handled. But now we need
    to define the responses for other requests too. Hence, add the following line
    in project level urls.py under urlpatterns list as follows:

        path("", include("home.urls"))

    This tells the server to redirect the client request to urls.py file
    of the home/<app name> app in case any request except /admin is sent
    its way.

    Step 3:
    Create urls.py as well as views.py in the generated home/<app name folder>
    Copy the content from project level urls.py into app level urls.py.
    Any request that is sent (other than "/admin") will be sent to home/urls.py
    Import views in home/urls.py by using the following line:

        from . import views

    Now, under the urlpatterns list add the following line

        path("", views.index, name="home")

    Hence, the flow of control is as follows:
        1. User enters the server url followed by nothing ("")
        2. The request is sent to project level urls.py
        3. Here, the urlpattern list directs it to home/<appname> app level urls
        4. In the home/urls.py file the request is sent to home.view.index function
           which renders the request.

    Step 4:
    In the home.views.py file create a function named index which takes in one
    parameter with the name request. Also import HttpResponse module.
    The index function must return HttpResponse(request). The function would look like:

        def index(request):
            return HttpResponse("This is homepage")

    Restart the server by running ./manage.py runserver

    Similarly, each additional paths can be added in the urlpatterns list
    of home.urls.py as follows:

        path("<path-name>", views.<path-name>, name="<path-name>")

        Eg: Make a path /about such that a request with the url being
            server-url/about results in a page that reads "This is about page"

            -> Add path("about", views.about, name="about") in urlpatterns list
            -> In home.views.py file crate a function about that returns HttpResponse("This is about page")

    This was all about URL Dispatching

x---x---x---x---x---x---x
Static files, Templates and Admin access (0:46:00 - 1:10:00)

Static files: Files that are publicly available

    Step 1: Configuring static files
    Create two folders with the names "static" and "templates" under the project folder.
    Any static file thats publicly available is stored here. To enable the users to
    access these files do the following:

    Open the settings.py under project "directory".
    Search for STATICFILES_DIRS. If it isn't present,
    add the following text at the bottom

        STATICFILES_DIRS = [
            BASE_DIR / "static",
            '/var/www/static/',
        ]

    Now, any file present in the static folder can be accessed as follows:

        server-url/static/<filename.extension>

    Step 2: Configuring templates

    In settings.py under the DIRS list of TEMPLATES map, add the following line:

        os.path.join(BASE_DIR, "templates")

    Create a template say with the name index.html under the templates folder.
    Now to render this html page open the home<app-name>.views.py file.

    Instead of returning an HttpResponse, make the index function
    return the following:

        return render(request,'index.html')

    To add variables, make a map before the return statement named context.
    The keys of this map will be the variables and the values will be their contents.
    Pass this map as follows:

        context = { "variable1":"Atharv", "variable2": "Hello" }
        return render(request,'index.html', context)

        In order to USE these keys which are now stored in the passed function as variables,
        use {{<variable-name>}}

    Now everytime the index function is called via the "" request this template is rendered!

All pages can be accessed via the HREF keyword and specifying the routename
Eg: href = "/about"

To add users in the admin Panel,

    Step 1:
    Run ./manage.py makemigrations  # Checks for changes in Schema and stores them in a queue
    Run ./manage.py migrate  # Applies pending changes created by makemigrations
    Run ./manage.py createsuperuser  # Creates a super user

x---x---x---x---x---x---x
Adding records in a database (1:52:00 - 2:07:00)

x---x---x---x---x---x---x
View database data using shell (2:16:00 - )

    Run ./manage.py shell

        from <app-name>.models import <object-name>
        <object-name>.objects.all() # Returns a query list of all objects of object-name type
        <object-name>.objects.all()[0] # Returns first object of object-name type
        <object-name>.objects.all()[0].name # Returns 'name' property of first object of object-name type
        <object-name>.objects.filter(name="name") # Returns all objects with name = "name"
        <object-name>.objects.filter(name="name", phone="999") # Returns all objects with name = "name" and phone=999

        ins = <object-name>.objects.all()[0]
        ins.property1 = "hello" # Updates the property1 property of ins instance to "hello"

        <object-name>.objects.filter(property1__startswith = "this is")
        # Returns objects whose property1 property starts with "this is"

        # Creates an instance of the object in the database
        <object-name>.objects.create(<property1>='<value-1>',<property2>='<value-2>',)

    exit() to exit the shell

x---x---x---x---x---x---x

Adding a model to your Project

    Step 1: Define a class in models.py such as follows:

        class <object-name>(models.Model):
            property1 = TextField()
            property2 = TextField()

    Step 2: Register your class in the following manner in the admin.py file:

        from .models import <name-of-class>
        admin.site.register(<name-of-class>)

    Step 3: Sync using the commands

        ./manage.py makemigrations
        ./manage.py migrate

    You can access this model in the admin page of your site

x---x---x---x---x---x---x

Common datatypes for Model attributes
Ref: https://docs.djangoproject.com/en/4.0/ref/models/fields/

    1. TextField
    2. CharField # Requires max_length eg: models.CharField(max_length=50)
    3. DecimalField # eg: models.DecimalField(max_digits=1000, max_decimals = 3)

x---x---x---x---x---x---x

Template Inheritance

There can be instances where one part of your website has to remain constant
while another needs to change based on the URL pattern requested. Template
inheritance helps us achieve this.

The basic idea is as follows:

    1. Create an html file to be your website blueprint ie. every
       page that renders will be rendered with the format of this blueprint.

    2. Define "blocks" in this html document. This is the part of the page that
       needs to be dynamic.

    3. Anything that should remain common must be declared outside the blocks.
       Note that this content will be rendered by all pages that extend this block.

    4. If you wish to display a page that isn't referring base html file, then do not
       extend the base block.

    5. Eg: Create a base.html file that looks something like below:

        <html>
            Hello, this content is common and will be displayed in
            all pages extending this page!
            {%block <block-name>%}
            Block 1!This content will be replaced and is dynamic
            {%endblock endblock <block-name>%}
            {%block <block-name>%}
            Block 2! This content will be replaced and is dynamic
            {%endblock endblock <block-name>%}
        </html>

        Every page that should replace block 1 or block 2 must now extend base.html and must look as follows:

            Anything written above this will be rendered only on the specific page
            {%extends 'base.html'%}
            Everything written here will change according to the page you are on
            {%block <block-name>%}
            {%endblock endblock <block-name>%}

    BONUS: The 'include' tag

    In order to render any piece of html code with name say 'code1.html'
    Just write {%include 'code1.html' %}

x---x---x---x---x---x---x

FOR LOOP in a template
Lets say you passed the following context in your page:

    context = {
                "numbers" = [1,2,4,7,10]
              }

To use this in html, use the follwing syntax:

    {%for item in numbers%}
        <li>{{item}}</li>
    {%endfor%}

    * IMP: {{forloop.counter}} helps you access the counter

IF STATEMENT (CONDITIONAL STATEMENTS IN DJANGO)

Syntax:
    {% if <boolean-expression> %}
        <li>This condition is true</li>
    {% elif <boolean-expression> %}
        <li>Second condition is true</li>
    {% else %}
        <li>None of the statements are true</li>
    {% endif %}

Boolean Literals: True, False

x---x---x---x---x---x---x
BUILT-IN Template Tag filter
REF: https://docs.djangoproject.com/en/4.0/ref/templates/builtins/

These are simple arithmetic operations that are built-in inside the
framework.

1. 'add'
USAGE: {{ <variable-name>|add: <argument> }}
EXAMPLE: {{ abc|add: 20 }} # abc stores 20 so output is 40

2. 'capfirst'
USAGE: {{ <variable-name>|add: <argument> }}
EXAMPLE: {{ name|capfirst }}
# name stores 'atharv learning django' so output is 'Atharv learning django'

Stacking filters:
USAGE:
{{ var1|<filter-1>|<filter-2> }}
# First filter1(var1) executes and then filter2(filter1(var2))) is the output

EXAMPLE: {{ name|capfirst|upper }}

x---x---x---x---x---x---x
Where and how does the lookup for a file take place?

Inside the DIRS list in settings.py the places that we list
are looked up.

            os.path.join(BASE_DIR, "atharv/templates"),
            os.path.join(BASE_DIR, "pages"),
            os.path.join(BASE_DIR, "productsPages"),

x---x---x---x---x---x---x
GETTING DATA FROM DATABASE

Simply use the shell commands mentioned above to get,create, delete
the data in your database and send them through the context.

x---x---x---x---x---x---x
ADDING DATA INTO DATABASE USING FORMS (BEGINNER METHOD)

Create a form with two input fields with name = "full_name" and name = "curr_age"
These will act as variable names later. The method of this form should
be POST.

Inside the url pattern function add the following:

    entered_name = request.POST.get("full_name")
    entered_age = request.POST.get("age")

    UserModelCustom.objects.create(name=entered_name,age=entered_age)

The get method is used to access the entered value in the name and
age field respectively. Then the command below is used to create
an instance of the UserModelCustom object inside the database with
these attributes.

Cleaner Example with Validation:

# FUNCTION

def addUser(request):
    # entered_name = request.POST.get("full_name")
    # entered_age = request.POST.get("age")
    # UserModelCustom.objects.create(name=entered_name, age=entered_age)
    my_form = RawFormData()
    if request.method == "POST":
        my_form = RawFormData(request.POST)
        if my_form.is_valid():
            print("Valid data:", my_form.cleaned_data)
            UserModelCustom.objects.create(**my_form.cleaned_data)
        else:
            print(my_form.errors)

    context = {
        "form": my_form
    }

    return render(request, 'create_user.html', context)


class RawFormData(forms.Form):
    name = forms.CharField()
    age = forms.IntegerField()

    # PASS initial = "", label = '', as arguments for default values
    # To convert a charfield into a text area, pass the argument: widget = forms.Textarea

# PAGE

{%extends 'base.html'%}

{% block content %}

<form method="POST"> {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" name="submit_button" value="Save">
</form>

{% endblock %}

In order to pass initial values in a form, pass a dictionary
containing keys as the variable names of your form and values
being their initial value.

x---x---x---x---x---x---x
DYNAMIC URL

Dynamic urls allow you to pass arguments through a url

    Eg: http://127.0.0.1:8000/user/1/

Implement this as follows:

    Step 1: In urlpatterns add a pattern in the following manner:

        path('getuser/<int:user_id>/', getuser, name="get_user")

    Step 2: In urls.py make the getuser function that renders
            the output. Name is getSingleUser.html

            This function should take two arguments one being
            the request and the other being the parameter declared
            in urlpattern list. ie here it is user_id.

            Search for the user with the id and render the result.
            The function may look like this:

                def getuser(request, user_id):
                    user = UserModelCustom.objects.get(id=user_id)
                    context = {
                        'name':user.name,
                        'age':user.age
                    }
                    return render(request, 'getSingleUser.html', context)

x---x---x---x---x---x---x
DELETING AN ENTRY FROM DATABASE

Deleting is fairly simple. Just search for the user you wish to delete,
search for the user using its id and apply the .delete() method
in the end. Use try and catch to make the code more robust.

Example:

    def deleteUser(request, user_id):
        user = None
        try:
            user = UserModelCustom.objects.get(id=user_id)
        except:
            pass

        message = {
            'result': 'User deleted successfully!',
            'status': 1
        }

        if user:
            user.delete()
        else:
            message = {
                'result': 'User does not exist!',
                'status': 0
            }
        return render(request, 'deletedUserPage.html', message)

